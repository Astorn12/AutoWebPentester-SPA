import { ChoosenHeader } from './../../../../.history/AutoWebPentester-SPA/src/app/_model/choosenHeader_20200518001906';
import { Request } from './../../../../.history/AutoWebPentester-SPA/src/app/_model/request_20200401062338';
import { HeaderPossibleValue } from '../_model/headerPossibleValue';
import { HttpVersion } from './../_model/httpVersion';
import { HttpRequestsService } from './../_services/httpRequests.service';
import { Component, OnInit, ViewChild } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Observable } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import { Method } from '../_model/method';
import { ActivatedRoute } from '@angular/router';
import { Header } from '../_model/header';

import { TdCodeEditorComponent } from '@covalent/code-editor';
import { editor } from 'monaco-editor';
import { MyRequest } from '../_model/myRequest';
import { MyResponse } from '../_model/myResponse';
import { MyHeader } from '../_model/myHeader';

declare const monaco: any;


@Component({
  selector: 'app-requests',
  templateUrl: './requests.component.html',
  styleUrls: ['./requests.component.css', './request.component.scss']
})
export class RequestsComponent implements OnInit {
  chosenHeaders: Header[];
  allHeaders: Header[];
  options: Method[];
  httpVersion = ["HTTP/1"];



  myControl = new FormControl();
  myControl1 = new FormControl();
  versionControl = new FormControl();
  filteredOptions: Observable<Method[]>;

  response: MyResponse;
  

  bodyDefaultValue:string=`
  {
  "name" : "oskar",
  "surname" : "zadora"
  }
  `;

  request: MyRequest;

  @ViewChild('editor') private _tdEditor: TdCodeEditorComponent;
  @ViewChild('body') private _body: TdCodeEditorComponent;


  
  private _editor: any;
 
  constructor(private _service: HttpRequestsService, private route: ActivatedRoute) {
    this.chosenHeaders = new Array();
    this.request= new MyRequest();
    this.request.body=this.bodyDefaultValue;
    
    this.addHeader();

  }

  ngOnInit() {

    

    this.route.data.subscribe(data => {
      this.options = data['options'];
    });
    this.loadHeaders();
   
    // this.content.registerLanguage(this.language);
    // this.content.theme = 'myCustomTheme';
    // this.content.language = 'mySpecialLanguage';


    this.filteredOptions = this.myControl.valueChanges
      .pipe(
        startWith<string | Method>(''),
        map(value => typeof value === 'string' ? value : value.name),
        map(name => name ? this._filter(name) : this.options.slice())
      );
  }


  loadHttpMethods() {
    this._service.getHttpMethods().subscribe((result: any[]) => {
      this.options = result
    });
  }
  loadHeaders() {
    this._service.getHeaders().subscribe((result: Header[]) => {
      this.allHeaders = result;
    });
  }

  addValue(header: Header) {
    header.choosenValues.push(new HeaderPossibleValue());
  }

  removeValue(header: Header, value: HeaderPossibleValue) {
    const index = header.choosenValues.indexOf(value, 0);
    if (index > -1) {
      header.choosenValues.splice(index, 1);
    }

  }

  addHeader() {
    var newHeader = new Header();
    newHeader.choosenValues.push(new HeaderPossibleValue());
   // this.chosenHeaders.push(newHeader);
    this.chosenHeaders.push(newHeader);
  }
  removeHeader(header: Header) {
    //const index = this.chosenHeaders.indexOf(header, 0);
    const index = this.chosenHeaders.indexOf(header, 0);
    if (index > -1) {
      //this.chosenHeaders.splice(index, 1);
      this.chosenHeaders.splice(index, 1);
    }
  }

  mapHeader(newHeader: Header, shematHeader: Header) {
    newHeader.possibleValues = shematHeader.possibleValues;
  }

  nullPossibleValues(header: Header) {
    header.possibleValues = new Array<HeaderPossibleValue>();
  }

  makeRequest() {

    this.chosenHeaders.forEach(element=>{
      let myHeader : MyHeader= new MyHeader();
      myHeader.headerName=element.name;
      
      element.possibleValues.forEach(value=>{
        myHeader.values.push(value.value);
      });
      this.request.headers.push(myHeader); 

    });

    this._service.makeRequest(this.request).subscribe((result: MyResponse) => {
      this.response = result;
      // this.response.statusCode="200";

    })
  }



  displayFn(options: Method[]): (name: string) => string | null {
    return (id: string) => {
      const correspondingOption = Array.isArray(options) ? options.find(option => option.name === name) : null;
      return correspondingOption ? correspondingOption.name : '';
    }
  }

  private _filter(name: string): Method[] {
    const filterValue = name.toLowerCase();

    return this.options.filter(option => option.name.toLowerCase().indexOf(filterValue) === 0);
  }

  editorTheme: string = 'vs';
  editorVal: string = `var rows = prompt("How many rows for your multiplication table?");
 var cols = prompt("How many columns for your multiplication table?");
 if(rows == "" || rows == null)
  rows = 10;
  [error]
 if(cols== "" || cols== null)
  cols = 10;
 createTable(rows, cols);
 function createTable(rows, cols) {
  var j=1;
  var output = "<table border='1' width='500' cellspacing='0'cellpadding='5'>";
  for(i=1;i<=rows;i++) {
    output = output + "<tr>";
    while(j<=cols) {
      output = output + "<td>" + i*j + "</td>";
      j = j+1;
    }
    output = output + "</tr>";
    j = 1;
  }
  output = output + "</table>";
  document.write(output);
 }
 `;
 
 customMonaco(){
  monaco.languages.register({ id: 'mySpecialLanguage' });
  monaco.languages.setMonarchTokensProvider('mySpecialLanguage', {
    tokenizer: {
      root: [
        [/\[error.*/, "custom-error"],
        [/\[notice.*/, "custom-notice"],
        [/\[info.*/, "custom-info"],
        [/\[[a-zA-Z 0-9:]+\]/, "custom-date"],
      ]
    }
  });
  
  monaco.editor.defineTheme('myCoolTheme', {
    base: 'vs',
    inherit: false,
    rules: [
      { token: 'custom-info', foreground: '808080' },
      { token: 'custom-error', foreground: 'ff0000', fontStyle: 'bold' },
      { token: 'custom-notice', foreground: 'FFA500' },
      { token: 'custom-date', foreground: '008800' },
    ]
  });

  monaco.languages.registerCompletionItemProvider('mySpecialLanguage', {
    provideCompletionItems: () => {
      var suggestions = [{
        label: 'simpleText',
        kind: monaco.languages.CompletionItemKind.Text,
        insertText: 'simpleText'
      }, {
        label: 'testing',
        kind: monaco.languages.CompletionItemKind.Keyword,
        insertText: 'testing(${1:condition})',
        insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet
      }, {
        label: 'ifelse',
        kind: monaco.languages.CompletionItemKind.Snippet,
        insertText: [
          'if (${1:condition}) {',
          '\t$0',
          '} else {',
          '\t',
          '}'
        ].join('\n'),
        insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
        documentation: 'If-Else Statement'
      }];
      return { suggestions: suggestions };
    }
  });
  monaco.editor.setTheme('myCoolTheme');
  
 }

  configChanged(): void {
    let mon=monaco;
    //let tmp=monaco.languages.getLanguages()[63];
    //this._tdEditor.registerLanguage(tmp);
    //this._tdEditor.language= 'mySpecialLanguage';
    //this._tdEditor.theme='myCoolTheme';
    this.getModel();
  }
 
  editorInitialized(editorInstance: any): void {
    this._editor = editorInstance;
    this.customMonaco();
    this._tdEditor.language = 'mySpecialLanguage';
    this._tdEditor.theme = 'myCoolTheme';
    this._tdEditor.editorStyle = 'myCoolTheme';
  }
 
  async getModel(): Promise<any> {
    // tslint:disable-next-line:prefer-immediate-return
    const editorModel: editor.ITextModel = await this._editor.getModel();
    // do something with editorModel
 
    return editorModel;
  }
   getCode() {
    return [
      '<11>httpd[31628]: [error] [client xx.xx.xx.xx] File does not exist: /usr/local/installed/apache/htdocs/squirrelmail/_vti_inf.html in 29-Mar 15:18:20.50 from xx.xx.xx.xx',
      '<11>httpd[25859]: [error] [client xx.xx.xx.xx] File does not exist: /usr/local/installed/apache/htdocs/squirrelmail/_vti_bin/shtml.exe/_vti_rpc in 29-Mar 15:18:20.54 from xx.xx.xx.xx',
    ].join('\n');;
  }

  

  

}
