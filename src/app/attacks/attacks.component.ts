
import { PentestService } from './../_services/pentest.service';
import { Component, OnInit, ViewChild } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { Tag } from '../_model/tag';
import { TagKind } from '../_model/TagKind';
import { ActivatedRoute } from '@angular/router';
import { MatRadioGroup } from '@angular/material/radio';
import { Pentest } from '../_model/pentest';
import { FormGroup } from '@angular/forms';
import { PentestWithDetails } from '../_model/pentestWithDetails';


@Component({
  selector: 'app-attacks',
  templateUrl: './attacks.component.html',
  styleUrls: ['./attacks.component.css']
})
export class AttacksComponent implements OnInit {
 

  pentestSortKinds: TagKind[];
  favoriteSeason: string;
  
  choosenTag: TagKind;
  choosenPentest : PentestWithDetails;
  @ViewChild('radioGroup') radioGroup :MatRadioGroup; 
  isLinear = false;
  firstFormGroup: FormGroup;
  secondFormGroup: FormGroup;
  

  websiteToPentest: string;


  submittedFormData;
  jsonFormOptions = {
    loadExternalAssets: false,
  };

  constructor(private _service: PentestService,private route:ActivatedRoute) {
    

   }

  ngOnInit() {
    this.route.data.subscribe(data=>{
      this.pentestSortKinds=data['options'];
    });
   // this.loadAttacks();
    this.choosenTag=this.pentestSortKinds[0];
    this.fillWithPentests();
    //console.log(this.choosenTag.name);
    //this.radioGroup[0].checked=true;
    //var x=this.radioGroup;
    //var radiobutton=x[0];
    //this.radioGroup

    this.websiteToPentest=this.route.snapshot.params['websitetopentest'];

  }

  fillWithPentests(){
    this.pentestSortKinds.forEach(element => {
      element.tags.forEach(tag=>{
        tag.pentests= new Array<Pentest>();
        //tag.pentests.push(new Pentest(1,"super pentest"));
      }
        )
    });
  }

  radioChange(tagKind: TagKind) {
   
    this.choosenTag = tagKind;
  }

  setChoosenPentest(pentest :PentestWithDetails){
    this.choosenPentest=pentest;
  }




  
  

  onSubmit(data: any) {
    this.submittedFormData = data;
  }

   showFormSchemaFn($event) {
    console.log($event);
  }

  showFormLayoutFn($event) {
    console.log($event);
  }








  layout = [ "*" ];

  schema = {
    "type": "object",
    "properties": {
      "first_name": { "type": "string" },
      "last_name": { "type": "string" },
      "addres": {
        "type": "object",
        "properties": {
          "street_1": { "type": "string" },
          "street_2": { "type": "string" },
          "city": { "type": "string" },
          "state": {
            "type": "string",
            "enum": [ "AL", "AK", "AS", "AZ", "AR", "CA", "CO", "CT", "DE",
                "DC", "FM", "FL", "GA", "GU", "HI", "ID", "IL", "IN", "IA",
                "KS", "KY", "LA", "ME", "MH", "MD", "MA", "MI", "MN", "MS",
                "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND",
                "MP", "OH", "OK", "OR", "PW", "PA", "PR", "RI", "SC", "SD",
                "TN", "TX", "UT", "VT", "VI", "VA", "WA", "WV", "WI", "WY" ]
          },
          "zip_code": { "type": "string" }
        }
      },
      "birthday": { "type": "string" },
      "notes": { "type": "string" },
      "phone_numbers": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "type": { "type": "string", "enum": [ "cell", "home", "work" ] },
            "number": { "type": "string" }
          },
          "required": [ "type", "number" ]
        }
      }
    },
    "required": [ "last_name" ]
  };
}

