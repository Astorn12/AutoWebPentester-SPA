import { PentestWithDetails } from './../_model/pentestWithDetails';
import { PentestService } from './../_services/pentest.service';
import { Component, OnInit, Injectable, Input, OnChanges, Output, EventEmitter } from '@angular/core';
import { SelectionModel } from '@angular/cdk/collections';
import { FlatTreeControl } from '@angular/cdk/tree';
import { MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';
import { BehaviorSubject } from 'rxjs';
import { TagKind } from '../_model/TagKind';
import { Tag } from '../_model/tag';
import { Pentest } from '../_model/pentest';
import { PatternValidator } from '@angular/forms';
import { PentestWithDetailsAgent } from '../_model/pentestWithDetailsAgent';

/**
 * Node for to-do item
 */
export class TodoItemNode {
  children: TodoItemNode[];
  item: string;
  id:number;
  /**
   *
   */

}




/** Flat to-do item node with expandable and level information */
export class TodoItemFlatNode {
  item: string;
  level: number;
  expandable: boolean;
  id:number;
}

/**
 * The Json object for to-do list data.
 */
let TREE_DATA: TodoItemNode[];

/**
 * Checklist database, it can build a tree structured Json object.
 * Each node in Json object represents a to-do item or a category.
 * If a node is a category, it has children items and new items can be added under the category.
 */

export class ChecklistDatabase {
  dataChange = new BehaviorSubject<TodoItemNode[]>([]);

  get data(): TodoItemNode[] { return this.dataChange.value; }

  constructor() {
    this.initialize();
  }

  initialize() {
    // Build the tree nodes from Json object. The result is a list of `TodoItemNode` with nested
    //     file node as children.
    const data = this.buildFileTree(TREE_DATA, 0);

    // Notify the change.
    this.dataChange.next(data);
  }

  /**
   * Build the file structure tree. The `value` is the Json object, or a sub-tree of a Json object.
   * The return value is the list of `TodoItemNode`.
   */
  buildFileTree(obj: TodoItemNode[] , level: number): TodoItemNode[] {
    return Object.keys(obj).reduce<TodoItemNode[]>((accumulator, key) => {
      const value :TodoItemNode = obj[key];
      const node = new TodoItemNode();
      node.item = value.item;
      node.id=value.id;

      if (value.children != null) {
        if (typeof value === 'object') {
          node.children = this.buildFileTree(value.children, level + 1);
        } else {
          node.item = value;
        }
      }

      return accumulator.concat(node);
    }, []);
  }

  /** Add an item to to-do list */
  insertItem(parent: TodoItemNode, child: TodoItemNode) {
    if (parent.children) {
      let realNode=this.getNode(parent);
      if(realNode.children==null)realNode.children= new Array<TodoItemNode>();
      realNode.children.push(child);
     
     
      this.dataChange.next(this.data);
      
    }
  }

  clearNode(node :TodoItemNode){
      let n=this.getNode(node);
      n.children=new Array<TodoItemNode>();
  }

  getNode(parent: TodoItemNode) :TodoItemNode{

    for(let i=0;i<this.data.length;i++){
      let element=this.data[i];
      if(element.id==parent.id && parent.item==element.item)
      { 
        return element;
      }
    }
    return null;
  }



  update(){
    this.dataChange.next(this.data);
  }

  updateItem(node: TodoItemNode, name: string) {
    node.item = name;
    this.dataChange.next(this.data);
  }
}
@Component({
  selector: 'app-tagtree',
  templateUrl: './tagtree.component.html',
  styleUrls: ['./tagtree.component.css']
})

export class TagTreeComponent implements OnInit, OnChanges {


  @Input() data: Tag[];
  _database: ChecklistDatabase;

  @Output() pentestHasBeenChoosenEmitter=new EventEmitter();
/**
 *
 */
constructor(private _service: PentestService) {

  
}

  ngOnChanges(changes: import("@angular/core").SimpleChanges): void {
    this.updateData();
    this._database = new ChecklistDatabase();
    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,
      this.isExpandable, this.getChildren);
    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);
    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);

    this._database.dataChange.subscribe(data => {
      this.dataSource.data = data;
    });
  }
  ngOnInit(): void {
    // let treeData=this.data;
    //   console.log(this.data.length);
    this.updateData();
    this._database = new ChecklistDatabase();
    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,
      this.isExpandable, this.getChildren);
    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);
    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);

    this._database.dataChange.subscribe(data => {
      this.dataSource.data = data;
    });
    this.updateData();

  }

  repaintTree(){
    this.updateData();
    this._database = new ChecklistDatabase();
    this.treeFlattener = new MatTreeFlattener(this.transformer, this.getLevel,
      this.isExpandable, this.getChildren);
    this.treeControl = new FlatTreeControl<TodoItemFlatNode>(this.getLevel, this.isExpandable);
    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);

    this._database.dataChange.subscribe(data => {
      this.dataSource.data = data;
    });
    this.updateData();
       }

  updateData() {
    let list: TodoItemNode[] = new Array<TodoItemNode>();
    this.data.forEach(element => {
      let node: TodoItemNode = new TodoItemNode();
      node.item = element.name;
      node.id=element.id;
      //if (element.pentests) {
        node.children = new Array<TodoItemNode>();
        element.pentests.forEach(pen => {
          let pentest: TodoItemNode = new TodoItemNode();
          pentest.item = pen.name;
          pentest.id=pen.id;
          node.children.push(pentest);
        }
        )
     // }

      list.push(node);
    });
    TREE_DATA = list;
  }

  updateTree(){
     let data= this.dataSource.data;
     this.dataSource.data=null;
     this.dataSource.data=data;
   

  }

  addNewItem(node: TodoItemFlatNode) {
    const parentNode = this.flatNodeMap.get(node);
    //this._database.insertItem(parentNode!, '');
    //this.treeControl.expand(node);
  }

  toogleNodeExpand(node: TodoItemNode){
    
    let flatNode: TodoItemFlatNode= this.getFlatNode(node);

    if( this.treeControl.isExpanded(flatNode)){
      this.treeControl.collapse(flatNode);
    }
    else
    {
    let tagId : number=node.id;
    node.children=new Array<TodoItemNode>();
    this.data.forEach(element=>{
      if(element.id==tagId){
        if( element.pentests.length==0){
        this._service.getAttacksOfTag(tagId).subscribe(result=>{
          element.pentests=result;
     
          //this._database.clearNode(node);
          element.pentests.forEach(pentest=>{
            let newNode : TodoItemNode=new TodoItemNode();
            newNode.id=pentest.id;
            newNode.item=pentest.name;
          
            this._database.insertItem(node,newNode);
            node.children.push(newNode);
            
            //this._database.insertItem(node,newNode);

          })
            //this._database.buildFileTree(TREE_DATA,0);
            this.updateData();
            //this.updateTree();
          
         // this._database.buildFileTree(TREE_DATA,0);
         
         
          
        })} this.treeControl.expand(this.getFlatNode(node));
      }
    })}
  }

  getFlatNode(node: TodoItemNode):TodoItemFlatNode{
    for (let i = 0; i < this.treeControl.dataNodes.length; i++) {
      if (this.treeControl.dataNodes[i].item == node.item && this.treeControl.dataNodes[i].id==node.id) {
       // this.todoItemSelectionToggle(this.treeControl.dataNodes[i]);
        return this.treeControl.dataNodes[i];
      }
    }
  }

  /** Map from flat node to nested node. This helps us finding the nested node to be modified */
  flatNodeMap = new Map<TodoItemFlatNode, TodoItemNode>();

  /** Map from nested node to flattened node. This helps us to keep the same object for selection */
  nestedNodeMap = new Map<TodoItemNode, TodoItemFlatNode>();

  /** A selected parent node to be inserted */
  selectedParent: TodoItemFlatNode | null = null;

  /** The new item's name */
  newItemName = '';

  treeControl: FlatTreeControl<TodoItemFlatNode>;

  treeFlattener: MatTreeFlattener<TodoItemNode, TodoItemFlatNode>;

  dataSource: MatTreeFlatDataSource<TodoItemNode, TodoItemFlatNode>;

  /** The selection for checklist */
  checklistSelection = new SelectionModel<TodoItemFlatNode>(true /* multiple */);



  getLevel = (node: TodoItemFlatNode) => node.level;

  isExpandable = (node: TodoItemFlatNode) => node.expandable;
  isFirstLevel = (node: TodoItemFlatNode) => node.level == 1;

  getChildren = (node: TodoItemNode): TodoItemNode[] => node.children;

  hasChild = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.expandable;

  hasNoContent = (_: number, _nodeData: TodoItemFlatNode) => _nodeData.item === '';

  /**
   * Transformer to convert nested node to flat node. Record the nodes in maps for later use.
   */
  transformer = (node: TodoItemNode, level: number) => {
    const existingNode = this.nestedNodeMap.get(node);
    const flatNode = existingNode && existingNode.item === node.item
      ? existingNode
      : new TodoItemFlatNode();
    flatNode.item = node.item;
    flatNode.level = level;
    flatNode.id = node.id;
    flatNode.expandable = !!node.children;
    this.flatNodeMap.set(flatNode, node);
    this.nestedNodeMap.set(node, flatNode);
    return flatNode;
  }

  /** Whether all the descendants of the node are selected. */
  descendantsAllSelected(node: TodoItemFlatNode): boolean {
    const descendants = this.treeControl.getDescendants(node);
    let descAllSelected = descendants.every(child =>
      this.checklistSelection.isSelected(child)
    );
    if(descendants.length==0) return false;
    return descAllSelected;
  }

  /** Whether part of the descendants are selected */
  descendantsPartiallySelected(node: TodoItemFlatNode): boolean {
    const descendants = this.treeControl.getDescendants(node);
    const result = descendants.some(child => this.checklistSelection.isSelected(child));
    return result && !this.descendantsAllSelected(node);
  }

  /** Toggle the to-do item selection. Select/deselect all the descendants node */
  todoItemSelectionToggle(node: TodoItemFlatNode): void {
    this.checklistSelection.toggle(node);
    const descendants = this.treeControl.getDescendants(node);
    this.checklistSelection.isSelected(node)
      ? this.checklistSelection.select(...descendants)
      : this.checklistSelection.deselect(...descendants);

    // Force update for the parent
    descendants.every(child =>
      this.checklistSelection.isSelected(child)
    );
    this.checkAllParentsSelection(node);
  }


  /** Toggle a leaf to-do item selection. Check all the parents to see if they changed */
  todoLeafItemSelectionToggle(node: TodoItemFlatNode): void {
    this.checklistSelection.toggle(node);
    this.checkAllParentsSelection(node);
  }

  /* Checks all the parents when a leaf node is selected/unselected */
  checkAllParentsSelection(node: TodoItemFlatNode): void {
    let parent: TodoItemFlatNode | null = this.getParentNode(node);
    while (parent) {
      this.checkRootNodeSelection(parent);
      parent = this.getParentNode(parent);
    }
  }

  /** Check root node checked state and change it accordingly */
  checkRootNodeSelection(node: TodoItemFlatNode): void {
    const nodeSelected = this.checklistSelection.isSelected(node);
    const descendants = this.treeControl.getDescendants(node);
    const descAllSelected = descendants.every(child =>
      this.checklistSelection.isSelected(child)
    );
    if (nodeSelected && !descAllSelected) {
      this.checklistSelection.deselect(node);
    } else if (!nodeSelected && descAllSelected) {
      this.checklistSelection.select(node);
    }
  }

  /* Get the parent node of a node */
  getParentNode(node: TodoItemFlatNode): TodoItemFlatNode | null {
    const currentLevel = this.getLevel(node);

    if (currentLevel < 1) {
      return null;
    }

    const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;

    for (let i = startIndex; i >= 0; i--) {
      const currentNode = this.treeControl.dataNodes[i];

      if (this.getLevel(currentNode) < currentLevel) {
        return currentNode;
      }
    }
    return null;
  }

  /** Select the category so we can insert the new item. */
 

  /** Save the node to database */
  saveNode(node: TodoItemFlatNode, itemValue: string) {
    const nestedNode = this.flatNodeMap.get(node);
    this._database.updateItem(nestedNode!, itemValue);
  }


  carryOnPentest(node: TodoItemFlatNode) {

    this._service.getPentestDetails(node.id).subscribe((result: PentestWithDetailsAgent)=>{
      let pen= new PentestWithDetails(result.id,result.name,JSON.parse(result.inputs));
      this.pentestHasBeenChoosenEmitter.emit(pen);
    });  
  }
}